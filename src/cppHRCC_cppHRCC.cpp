/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "cppHRCC_cppHRCC.h"
/* Header for class cppHRCC_cppHRCC */

#ifndef _Included_cppHRCC_cppHRCC
#define _Included_cppHRCC_cppHRCC
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cppHRCC_cppHRCC
 * Method:    InitStatus
 * Signature: ([C)I
 */
JNIEXPORT jint JNICALL Java_cppHRCC_cppHRCC_InitStatus
  (JNIEnv *, jclass, jcharArray);

/*
 * Class:     cppHRCC_cppHRCC
 * Method:    HRCCArrTask
 * Signature: (IDI)[I
 */
JNIEXPORT jintArray JNICALL Java_cppHRCC_cppHRCC_HRCCArrTask
  (JNIEnv *, jclass, jint, jdouble, jint);

/*
 * Class:     cppHRCC_cppHRCC
 * Method:    HRCCEndTask
 * Signature: (ID)I
 */
JNIEXPORT jint JNICALL Java_cppHRCC_cppHRCC_HRCCEndTask
  (JNIEnv *, jclass, jint, jdouble);

#ifdef __cplusplus
}
#endif
#endif

#include "stadfx.h"
#include "ReadCfg.h"
JNIEXPORT jint JNICALL Java_cppHRCC_cppHRCC_InitStatus(JNIEnv *env, jclass, jcharArray _fileName)
{
	cout << "fileName = " << _fileName << endl;
	//char *p = _fileName;
	jchar * jchar_ptr = env->GetCharArrayElements(_fileName, NULL);
	int len_char = env->GetArrayLength(_fileName);
	char * buffer = (char*)malloc(len_char);
	if (len_char == 0)
		return 0;
	for (size_t i = 0; i < len_char; i++)
	{
		buffer[i] = jchar_ptr[i];
	}
	buffer[len_char] = '\0';

	cout << "fileName = " << buffer << endl;
	///malloc
	//_fileName
	jint x;
	x = 1;
	return x;
}

JNIEXPORT jintArray JNICALL Java_cppHRCC_cppHRCC_HRCCArrTask(JNIEnv *env, jclass, jint robID, jdouble _arriveTime, jint _taskType)
{
	jintArray output = env->NewIntArray(2);
	jboolean isCopy = JNI_FALSE;
	jint * destArrayElems = env->GetIntArrayElements(output, &isCopy);
	destArrayElems[0] = 1;
	destArrayElems[1] = 2;
	env->SetIntArrayRegion(output,0,2, destArrayElems);
	return output;
}

JNIEXPORT jint JNICALL Java_cppHRCC_cppHRCC_HRCCEndTask(JNIEnv *, jclass, jint, jdouble)
{
	jint x;
	x = 10;
	return x;
	//return JNIEXPORT jint JNICALL();
}
